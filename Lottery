// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 public _totalSupply;
     uint256 public fromBalance;

    string private _name;
    string private _symbol;

   function test() public view returns(uint,uint)
    {
        return (fromBalance,_totalSupply);
    } 
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    
    function totalSupply() external view virtual override returns (uint256) {
        return _totalSupply;
    }

   
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

   
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

   
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

   
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) public  virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);
    
         fromBalance = _balances[to];
        // require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        // unchecked {
        //     _balances[from] = fromBalance - amount;
        // }
        _balances[to] += amount;

        emit Transfer(from, to, amount);
    
        _afterTokenTransfer(from, to, amount);
    }

   
    function _mint(address account, uint256 amount) public virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }
    
    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }
     function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal  {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
     function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }
     function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
     function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
     ) internal virtual {}
}
contract Token is ERC20{
   
    constructor(uint256 intialsupply)ERC20 ("MytokenName","SYM"){
        _mint(msg.sender,intialsupply);
        
    }
  function decimals() public view virtual override returns (uint8) {
        return 4;
    }
} 

contract Lottery  {
  Token t;
  address public lotteryselecter;
  address payable[]  public participants;
  uint time_end;
  uint time_start; 

  uint public ticketcount=0; 
//   uint public RendomNo=0;
    uint len;
    uint  number;
    uint lotteryround=0;
    uint RendomNo=0;
    address payable lotterywinner;

   
   struct Info{
   uint cuurentlotteryround;
   address lotteryselecter;
    address payable winner;
    address payable lotterywinner;
    uint len;
    uint  RendomNo;
    uint Round;
   }
    mapping(uint=>Info) public LotteryInfo;
    
    constructor(){
      
       t=Token(0x9D7f74d0C41E726EC95884E0e97Fa6129e3b5E99);
         time_end = block.timestamp + (2 minutes);
         time_start=block.timestamp;
    }
   receive() external payable{}
   function buy(uint token) public  payable  
    {  
        // require(block.timestamp<time_end,"Time is over");
        t.transfer(msg.sender,token);
        // require(msg.value==1 ether );
         participants.push(payable(msg.sender));
         ticketcount++;
    }
    function information(uint id) public view returns(uint Lotterround,address Lotteryselecter,address Winner,uint Participants,uint RandomNos ){
        Info storage info=LotteryInfo[id];
        return (info.cuurentlotteryround,info.lotteryselecter,info.lotterywinner,info.len,info.RendomNo);
    }
    function time()public view returns(uint,uint,uint ){
        return (block.timestamp,time_end,time_start);
    }
    function user()public view returns(address payable[] memory){
        return participants;
    }
    
    function getbalance() public view returns(uint)
    {
     return address(this).balance;
    }
    // event Log(address payable win,uint round,uint user,uint RandomNo);
    function selectwinner(uint noofbuyer)public  
    { 
    
        lotteryround++; 
        Info storage info=LotteryInfo[lotteryround];
        info.cuurentlotteryround=lotteryround;
        require(ticketcount==noofbuyer," input number is wrong!!");
        info.lotteryselecter=msg.sender;
        info.RendomNo=uint(keccak256(abi.encode(block.timestamp,participants.length)))%noofbuyer;
        info.len=participants.length;
        
        info.winner=participants[info.RendomNo];
        payable(info.winner).transfer(getbalance());
        info.lotterywinner=payable(info.winner);
     
        participants=new address payable[] (0);
        ticketcount=0;
        // LotteryInfo[lotteryround]=Info(lotteryround,lotteryselecter,lotterywinner,len,RendomNo);
        require(block.timestamp>=time_start,"time is remaing");
        time_end= block.timestamp + 1 minutes;
    }  
}
contract Caller {
     event log(uint);
      uint ETH;
      bytes  public  e=(abi.encodeWithSignature("buy(uint256)",100));
//    function test2() public payable{
//          ETH=msg.value;
//          emit log(ETH);
//    }
//     //  uint e=msg.value-1 ether;
function sendeth(address payable _to)public payable{
   (bool success, )= _to.call{value: 1 ether }(e);
//    (abi.encodeWithSignature("buy(uint256)", 100));
    require(success,"Contract execution Failed");
    }
 }

